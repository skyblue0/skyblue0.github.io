<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Test]]></title>
      <url>/2017/08/06/test/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/08/05//404.html/</url>
      <content type="html"><![CDATA[<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
</head>
<body>


<script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="https://skyblue0.github.io/" homepagename="回到我的主页"></script>



</body>
</html>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用基础教程]]></title>
      <url>/2015/08/08/git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="shell-bash"><a href="#shell-bash" class="headerlink" title="shell+bash"></a>shell+bash</h1><h2 id="shell基本概念"><a href="#shell基本概念" class="headerlink" title="shell基本概念"></a>shell基本概念</h2><blockquote>
<p>在计算机科学中，Shell俗称壳，是指“提供使用者使用界面”的软件（命令解析器）、比如window系统的cmd、linux系统中的bash。<strong>它可以接受用户的命令，然后调用响应的应用程序。</strong> </p>
</blockquote>
<img src="/2015/08/08/git基础教程/shell.jpg" alt="[shell]" title="[shell]">
<p>创建文件、移动文件、调用计算器等计算机功能最终都依赖于计算机的硬件，用户无法直接操作这些硬件。但是我们可以通过shell，输入响应的命令，就可以让计算机调用响应的硬件去执行响应的操作。因此我们把shell叫做壳。</p>
<p><strong>shell的实质就是一个软件，它可以接收用户的命令，然后调用计算机相应的应用程序</strong></p>
<h2 id="shell分类"><a href="#shell分类" class="headerlink" title="shell分类"></a>shell分类</h2><ol>
<li>图形界面shell：通过提供友好的可视化界面，调用相应应用程序，如windows系列操作系统，Linux系统上的图形化应用程序GNOME、KDE等。</li>
<li>命令行shell：通过键盘输入特定命令的方式，调用相应的应用程序，<ul>
<li>windows系统的cmd.exe、PowerShell</li>
<li>Linux系统的Bourne shell ( sh)、Bourne Again shell ( bash)等。</li>
</ul>
</li>
</ol>
<p><strong>图形界面shell操作方便，直观，但是更加消耗计算机的性能。命令行shell因为不用渲染界面，效率更高，在linux服务器上使用非常的广泛</strong> </p>
<h2 id="关于bash"><a href="#关于bash" class="headerlink" title="关于bash"></a>关于bash</h2><blockquote>
<p>bash是linux操作系统默认的命令行shell。windows系统中并不支持bash。</p>
<p>想要在windows中使用bash，需要安装软件，这个软件<strong>模拟集成</strong> 了bash的大部分命令。</p>
</blockquote>
<p>学习bash的目的：</p>
<ol>
<li>将来工作过程中，碰到了linux服务器，能够大致知道如何操作。</li>
<li>git bash中需要使用到一些简单的bash命令。</li>
</ol>
<h2 id="常见的bash命令"><a href="#常见的bash命令" class="headerlink" title="常见的bash命令"></a>常见的bash命令</h2><ol>
<li>在任意文件夹中，都可以使用右键，通过git bash here打开命令行窗口，此时的路径就是当前目录。</li>
<li>窗口上右键，通过options–&gt;Text–&gt;select可以调整字体的大小。</li>
</ol>
<ul>
<li>路径操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd 改变目录  （change directory）</span></div><div class="line"><span class="built_in">cd</span> images   <span class="comment">#进入images文件夹</span></div><div class="line"><span class="built_in">cd</span> ..      <span class="comment">#进入上一层目录</span></div><div class="line"><span class="built_in">cd</span> ~       <span class="comment">#进入用户根目录</span></div><div class="line"></div><div class="line"><span class="comment"># tab  自动补全，当我们输命令或者目录很长时，可以使用tab键进行自动补全。</span></div><div class="line"><span class="comment"># 按两次tab，会把所有符合要求的内容都列出来。</span></div><div class="line"></div><div class="line"><span class="comment"># pwd 打印当前目录的路径 （print work directory）</span></div><div class="line"><span class="built_in">pwd</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ls 展示当前目录列表（list）</span></div><div class="line">ls         <span class="comment"># 展示当前目录</span></div><div class="line">ls -a      <span class="comment"># 展示全部内容，包括隐藏文件</span></div><div class="line">ls -l      <span class="comment"># 以列表的形式展示内容</span></div><div class="line">ls -al     <span class="comment"># 以列表的形式展示所有的内容，包括隐藏文件。</span></div><div class="line">ls --<span class="built_in">help</span>  <span class="comment"># 查看ls所有的参数。</span></div><div class="line">ls -l images   <span class="comment"># 展示images目录下的文件，如果没有写目录，默认展示当前目录。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># clear reset清屏</span></div><div class="line">clear  <span class="comment"># 清除屏幕内容，滚动条，保留了历史</span></div><div class="line">reset  <span class="comment"># 重置，历史记录没了。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># mkdir  创建一个文件夹 （make directory）</span></div><div class="line">mkdir css          <span class="comment"># 创建一个css的文件夹</span></div><div class="line">mkdir css img js   <span class="comment"># 创建了三个文件夹</span></div><div class="line"></div><div class="line"><span class="comment"># rmdir  删除一个空的文件夹（没啥用）</span></div><div class="line">rmdir img   <span class="comment"># 删除文件夹</span></div><div class="line"></div><div class="line"><span class="comment"># touch  创建文件</span></div><div class="line">touch index.html   <span class="comment">#创建了一个index.html文件</span></div><div class="line">touch css/index.css <span class="comment"># 在css目录下创建idnex.css文件</span></div><div class="line"></div><div class="line"><span class="comment"># rm 删除一个文件获取文件夹</span></div><div class="line">rm index.html <span class="comment"># 删除index.html文件</span></div><div class="line">rm js         <span class="comment"># 删除空的js文件夹</span></div><div class="line">rm -r css     <span class="comment"># 递归删除一个文件夹</span></div><div class="line"></div><div class="line"><span class="comment"># mv 移动文件（move）</span></div><div class="line">mv index.html js            <span class="comment"># 将html文件移动到js文件夹中</span></div><div class="line">mv index.html index2.html   <span class="comment"># 将index.html重命名为index2.html</span></div><div class="line"></div><div class="line"><span class="comment"># cp 复制文件（cp）</span></div><div class="line">cp index.html index2.html   <span class="comment"># 复制index.html文件，命名为index2.html</span></div><div class="line">cp -r css css02             <span class="comment"># 如果复制的是文件夹，需要使用-r参数。</span></div><div class="line"></div><div class="line"><span class="comment"># cat 查看文件全部内容</span></div><div class="line">cat index.html</div><div class="line"><span class="comment"># less 查看文件部分内容</span></div><div class="line">less index.html</div><div class="line"><span class="comment"># q退出查看</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#  &gt;  重定向  将输出结果重定向到某个文件中</span></div><div class="line">ls &gt; info.text                   <span class="comment"># 将list的结果重定向到info.text文件中</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; info.text   <span class="comment"># 将hello world重定向到info.text文件中 会覆盖原来的内容</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello world1"</span> &gt;&gt; info.text <span class="comment"># 将hello world1追加到info.text文件中。</span></div></pre></td></tr></table></figure>
<p><a href="http://www.techug.com/post/a-murder.html" target="_blank" rel="external">rm -rf/ 又引发了一个血案</a></p>
<h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><p><strong>vi编辑器的使用了解即可，除非真正在linux环境，不然是用不到的</strong>  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi info.txt  <span class="comment"># 使用vi编辑器打开info.txt文件，如果该文件不存在，将会被创建。</span></div></pre></td></tr></table></figure>
<p>vi编辑器的三种模式：</p>
<img src="/2015/08/08/git基础教程/vi3model.png" alt="[vi编辑器的三种模式]" title="[vi编辑器的三种模式]">
<p><strong>命令模式</strong> </p>
<p>使用vi命令，默认进入的是命令模式，此时是无法编辑的。使用<code>a</code>或者<code>i</code>可以进入输入模式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 进入编辑模式，</span></div><div class="line">i <span class="comment">#光标前面插入（insert）</span></div><div class="line">I <span class="comment">#行首插入</span></div><div class="line">a <span class="comment">#光标后插入（append）</span></div><div class="line">A <span class="comment">#行末插入</span></div><div class="line">o <span class="comment">#当前行下面插入新行</span></div><div class="line">O <span class="comment">#当前行上面插入新行</span></div><div class="line"></div><div class="line"><span class="comment"># 保存并退出，大写</span></div><div class="line">ZZ</div><div class="line"></div><div class="line"><span class="comment"># 辙销操作，可多次使用</span></div><div class="line">u</div><div class="line"></div><div class="line"><span class="comment"># 删除当前行</span></div><div class="line">dd</div><div class="line"></div><div class="line"><span class="comment"># 复制当前行</span></div><div class="line">yy</div><div class="line"></div><div class="line"><span class="comment"># 粘贴内容</span></div><div class="line">p</div><div class="line"></div><div class="line"><span class="comment"># 向前翻页</span></div><div class="line">ctrl+b</div><div class="line"></div><div class="line"><span class="comment"># 向后翻页</span></div><div class="line">ctrl+f</div></pre></td></tr></table></figure>
<p><strong>输入模式</strong> </p>
<p>在输入模式下，可以任意的输入内容</p>
<p>在输入模式下，按<code>esc</code>进入命令行模式。</p>
<p><strong>末行模式</strong> </p>
<p>插入模式无法直接进入末行模式。</p>
<p>在命令行模式下按下<code>shift+:</code>进入末行模式，在末行模式下，通常用来保存文件或者撤销保存</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用 vi</span></div><div class="line">vi 文件路径</div><div class="line"></div><div class="line"><span class="comment"># 保存，</span></div><div class="line">:w </div><div class="line"><span class="comment"># :w filenme #另存为</span></div><div class="line"></div><div class="line"><span class="comment"># 退出</span></div><div class="line">:q</div><div class="line"></div><div class="line"><span class="comment"># 保存并退出</span></div><div class="line">:wq</div><div class="line"></div><div class="line"><span class="comment"># 撤销更改，返回到上一次保存的状态</span></div><div class="line">:e!</div><div class="line"></div><div class="line"><span class="comment"># 不保存强制退出</span></div><div class="line">:q!</div><div class="line"></div><div class="line"><span class="comment"># 展示行号</span></div><div class="line">:<span class="built_in">set</span> nu</div></pre></td></tr></table></figure>
<p>练习：在js的目录下新建一个文件，静夜思.txt，输入这首诗的内容，并且保存。</p>
<p><a href="http://www.linuxidc.com/Linux/2015-08/121506.htm" target="_blank" rel="external">Emacs和Vim：神的编辑器和编辑器之神</a></p>
<h1 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h1><h2 id="什么是版本控制系统？"><a href="#什么是版本控制系统？" class="headerlink" title="什么是版本控制系统？"></a>什么是版本控制系统？</h2><p>版本控制系统（Version Control System）:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制。</p>
<p>常见的版本控制系统有：svn、cvs、git</p>
<h2 id="为什么要有版本控制系统"><a href="#为什么要有版本控制系统" class="headerlink" title="为什么要有版本控制系统?"></a>为什么要有版本控制系统?</h2><ol>
<li>在开发过程中，经常需要对一个文件进行修改甚至删除，但是我们又希望能够保存这个文件的历史记录，如果通过备份，那么管理起来会非常的复杂。</li>
<li>在多人开发时，如果需要多人合作开发一个页面，那么修改以及合并也会非常的棘手。容易出现冲突。</li>
</ol>
<h2 id="版本控制系统分类"><a href="#版本控制系统分类" class="headerlink" title="版本控制系统分类"></a>版本控制系统分类</h2><p><strong>本地版本控制系统</strong></p>
<p>本地版本控制系统就是在一台机器上，记录版本的不同变化，保证内容不会丢失</p>
<p>缺点：如果多人开发，每个人都在不同的系统和电脑上开发，没办法协同工作。</p>
<img src="/2015/08/08/git基础教程/vcs.png" alt="[vcs]" title="[vcs]">
<p><strong>集中式版本控制系統</strong> </p>
<p>svn/cvs都是集中式的版本控制系统</p>
<ol>
<li>需要一个中央服务器来管理代码的的版本和备份</li>
<li>所有的用户电脑都是从中央服务器获取代码或者是将本地的代码提交到中央服务器</li>
<li>依赖与网络环境，如果连不上中央服务器，就无法提交和获取代码。</li>
<li>如果中央服务器宕机，所有人都无法工作。</li>
</ol>
<img src="/2015/08/08/git基础教程/jzs.png" alt="[jzs]" title="[jzs]">
<p><strong>分布式版本控制系统</strong> </p>
<p>git是分布式的版本控制系统。</p>
<ol>
<li>需要一台服务器作为代码仓库</li>
<li>每个用户电脑都是一个服务器，并且和代码仓库是镜像的，用户修改和获取代码都是提交到自己的服务器当中。</li>
<li>不需要网络就可以进行工作。</li>
<li>当连接网络时，用户可以选择将自己的服务器与代码仓库进行同步。</li>
</ol>
<img src="/2015/08/08/git基础教程/fbs.png" alt="[fbs]" title="[fbs]">
<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><blockquote>
<p>Git是一款免费、开源的<strong>分布式</strong> <strong>版本控制系统</strong> ，用于敏捷高效地处理任何或小或大的项目。</p>
</blockquote>
<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="external">下载地址</a></p>
<p>安装很简单，一直下一步即可。在任意的目录下右键，能够出现下图，表示安装成功了。</p>
<img src="/2015/08/08/git基础教程/gitinstall.png" alt="[gitinstall]" title="[gitinstall]">
<p>git是用法方式主要有两种，</p>
<ul>
<li>git gui，即图形化界面的方式</li>
<li>git bash，命令行的方式</li>
</ul>
<p><strong>bash是linux系统的命令，因此学习git前，我们先学习一下bash</strong> </p>
<h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><ol>
<li>初始化git仓库<code>git init</code></li>
<li>查看当前git仓库的状态<code>git status</code></li>
<li>将文件添加到git的暂存区<code>git add 文件名</code></li>
<li>将文件由暂存区提交到仓库区<code>git commit -m &#39;提交说明&#39;</code></li>
<li>查看提交日子<code>git log</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 初始化git仓库，会在当前目录生成一个隐藏文件夹 .git  不要去修改这个文件夹下的任意东西。</span></div><div class="line">git init</div><div class="line"></div><div class="line"><span class="comment"># 查看git的状态 ,如果此时新建一个文件，那么这个文件是没有被追踪的，说白了git还没有管理这个新建的文件</span></div><div class="line">git status </div><div class="line"></div><div class="line"><span class="comment"># 让git管理这个新建的文件</span></div><div class="line">git add index.html</div><div class="line"></div><div class="line"><span class="comment"># 让文件由暂存区提交到仓库区。此时文件才真正的被git管理了。</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment"># 如果提交日志乱码，右键--&gt;options--&gt;Text--&gt;将编码改成utf-8</span></div><div class="line"></div><div class="line">git commit -m <span class="string">'第一次提交'</span></div><div class="line"></div><div class="line"><span class="comment"># 查看提交日志</span></div><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<h2 id="配置邮箱和用户名"><a href="#配置邮箱和用户名" class="headerlink" title="配置邮箱和用户名"></a>配置邮箱和用户名</h2><p>如果第一次使用git，会要求设置用户名和邮箱</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># git config  user.name 你的目标用户名</span></div><div class="line"><span class="comment"># git config  user.email 你的目标邮箱名</span></div><div class="line"><span class="comment"># 这种配置方式只有在当前仓库生效</span></div><div class="line">git config user.name hcc</div><div class="line">git config user.email flycc@163.com</div><div class="line"></div><div class="line"><span class="comment"># 可以使用--global参数，配置全局的用户名和邮箱，这样别的git仓库就不需要重新配置了。</span></div><div class="line"><span class="comment"># 如果同时配置了局部的和全局的，那么局部的用户名和邮箱将会生效。</span></div><div class="line">git config  --global user.name hucc</div><div class="line">git config  --global user.email 111111@qq.com</div><div class="line"></div><div class="line"><span class="comment"># 查看配置信息</span></div><div class="line">git config --list</div></pre></td></tr></table></figure>
<h2 id="git的工作原理"><a href="#git的工作原理" class="headerlink" title="git的工作原理"></a>git的工作原理</h2><img src="/2015/08/08/git基础教程/gityl.png" alt="[gityl]" title="[gityl]">
<h2 id="git命令详解"><a href="#git命令详解" class="headerlink" title="git命令详解"></a>git命令详解</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><ul>
<li>作用：将文件由 工作区 添加到 暂存区，暂存文件</li>
<li>命令：<code>git add 文件名</code><ul>
<li>例如： <code>git add index.html</code></li>
</ul>
</li>
<li><code>git add --all</code> 或者 <code>git add -A</code>（简写） 添加所有文件</li>
<li><code>git add a.txt b.txt</code> 同时添加两个文件</li>
<li><code>git add *.js</code> 添加当前目录下的所有js文件</li>
</ul>
<h3 id="git-checkout-文件名"><a href="#git-checkout-文件名" class="headerlink" title="git checkout 文件名"></a>git checkout 文件名</h3><ul>
<li>作用：暂存区的内容恢复到工作区。</li>
<li><code>git checkout 1.txt</code> 将暂存区中1.txt文件恢复到工作区</li>
</ul>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><ul>
<li>作用：将文件由 暂存区 添加到  仓库区</li>
<li><code>git commit -m &quot;提交说明&quot;</code></li>
</ul>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><ul>
<li>作用：查看文件的状态</li>
</ul>
<ul>
<li>命令：<code>git status</code></li>
<li>命令：<code>git stauts -s</code> 简化日志输出格式</li>
</ul>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul>
<li>作用：查看提交日志</li>
<li><code>git log</code> 只能查看当前head以及以前的日志</li>
<li><code>git log --oneline</code> 简洁的日志信息</li>
<li><code>git reflog</code> 查看所有的提交变更日志</li>
</ul>
<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><ul>
<li>作用：版本回退，将代码恢复到已经提交的某一个版本中。</li>
<li><code>git reset --hard 版本号</code> 将代码回退到某个指定的版本(版本号只要有前几位即可)</li>
<li><code>git reset --hard head~1</code>将版本回退到上一次提交<ul>
<li>~1:上一次提交</li>
<li>~2:上上次提交</li>
<li>~0:当前提交</li>
</ul>
</li>
</ul>
<h2 id="git忽视文件"><a href="#git忽视文件" class="headerlink" title="git忽视文件"></a>git忽视文件</h2><blockquote>
<p>在仓库中，有些文件是不想被git管理的，比如数据的配置密码、写代码的一些思路等。git可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。</p>
</blockquote>
<ul>
<li>在仓库的根目录创建一个<code>.gitignore</code>的文件，文件名是固定的。</li>
<li>将不需要被git管理的文件路径添加到<code>.gitignore</code>中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 忽视idea.txt文件</span></div><div class="line">idea.txt</div><div class="line"></div><div class="line"><span class="comment"># 忽视.gitignore文件</span></div><div class="line">.gitignore</div><div class="line"></div><div class="line"><span class="comment"># 忽视css下的index.js文件</span></div><div class="line">css/index.js</div><div class="line"></div><div class="line"><span class="comment"># 忽视css下的所有的js文件</span></div><div class="line">css/*.js</div><div class="line"></div><div class="line"><span class="comment"># 忽视css下的所有文件</span></div><div class="line">css/*.*</div><div class="line"><span class="comment"># 忽视css文件夹</span></div><div class="line">css</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Git </category>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的分支操作、远程仓库与hexo搭建]]></title>
      <url>/2015/08/06/git%E7%9A%84%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%E3%80%81%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<img src="/2015/08/06/git的分支操作、远程仓库与hexo搭建/fenzhi.png" alt="[分支工作原理]" title="[分支工作原理]">
<h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a><strong>为什么要有分支？</strong></h2><ul>
<li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li>
<li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li>
<li>在工作过程中，经常会碰到<strong>多任务并行开发</strong> 的情况，使用分支就能很好的避免任务之间的影响。</li>
<li>其他版本工具比如svn，cvs中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。</li>
</ul>
<h2 id="分支操作的命令"><a href="#分支操作的命令" class="headerlink" title="分支操作的命令"></a>分支操作的命令</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与主分支的内容完全相同。</li>
<li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li>
</ul>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><code>git branch</code>可以查看所有的分支，</li>
<li>在当前分支的前面会有一个</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout 分支名称</code>切换分支</li>
<li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li>
<li>切换分支之前，<strong>必须保证代码已经提交了</strong> </li>
</ul>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li><code>git branch -d 分支名称</code> 可以删除分支</li>
<li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li>
<li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li>
<li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li>
</ul>
<h2 id="git分支的工作原理"><a href="#git分支的工作原理" class="headerlink" title="git分支的工作原理"></a>git分支的工作原理</h2><img src="/2015/08/06/git的分支操作、远程仓库与hexo搭建/git-branch.png" alt="[分支工作原理]" title="[分支工作原理]">
<h2 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h2><ul>
<li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li>
<li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。</p>
<h2 id="创建远程仓库（了解）"><a href="#创建远程仓库（了解）" class="headerlink" title="创建远程仓库（了解）"></a>创建远程仓库（了解）</h2><ul>
<li>创建远程仓库</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare   # 创建一个裸仓库</div></pre></td></tr></table></figure>
<ul>
<li>远程仓库是一个裸仓库，只支持push、clone、pull等操作</li>
<li>裸仓库的目的是用来管理版本的共享。</li>
<li>裸仓库不支持add commit等操作。不进行任何的开发工作。</li>
<li>一般裸仓库的名称会以.git结尾</li>
</ul>
<h2 id="远程仓库相关的命令"><a href="#远程仓库相关的命令" class="headerlink" title="远程仓库相关的命令"></a>远程仓库相关的命令</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul>
<li>作用：将本地代码提交到远程仓库</li>
<li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意master分支必须写，不能省略</li>
<li>例子：<code>git push git@github.com:hucongcong/test.git master</code> 如果第一次使用，需要填写github的用户名和密码</li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul>
<li>作用：将远程的代码下载到本地</li>
<li><code>git pull 代码地址 master</code> 将远程的代码中master分支下载到本地</li>
<li>通常在push前，需要先pull一次。</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul>
<li>作用：克隆远程仓库的代码到本地</li>
<li><code>git clone 仓库地址 自定义本地仓库名</code> 将整个仓库克隆到本地</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p>
<ul>
<li><code>git remote add 仓库别名 仓库地址</code> 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。<ul>
<li><code>git remote add hucc git@github.com:hucongcong/test.git</code> 设置了一个hucc的仓库别名，以后push和pull都可以不用仓库地址，而用hucc</li>
</ul>
</li>
<li><code>git remote remove hucc</code> 删除hucc这个仓库别名。</li>
<li><code>git remote</code> 查看所有的仓库别名</li>
<li>如果使用了<code>git clone</code>命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>git与github没有直接的关系。</p>
<ul>
<li>git是一个版本控制工具。</li>
<li>github是一个代码托管平台，是git的一个远程代码仓库。</li>
<li>将来工作时，公司会有自己的代码仓库。</li>
</ul>
<p><a href="https://github.com/" target="_blank" rel="external">github官网</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-git</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</div><div class="line">2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</div></pre></td></tr></table></figure>
<p>在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。</p>
<h2 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h2><p>每次push代码，都需要输入用户名跟密码，非常的麻烦。因此我们可以配置一个SSH免登陆。</p>
<ul>
<li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li>
<li>使用ssh可以实现免密码操作（不需要使用密码）</li>
</ul>
<h3 id="对称加密与非对称加密（了解）"><a href="#对称加密与非对称加密（了解）" class="headerlink" title="对称加密与非对称加密（了解）"></a>对称加密与非对称加密（了解）</h3><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p>
<p>优点：算法公开、计算量小、加密速度快、加密效率高</p>
<img src="/2015/08/06/git的分支操作、远程仓库与hexo搭建/对称加密.jpg" alt="[对称加密]" title="[对称加密]">
<p>非对称加密：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<p>优点：更安全，缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<img src="/2015/08/06/git的分支操作、远程仓库与hexo搭建/非对称加密.jpg" alt="[非对称加密]" title="[非对称加密]">
<h3 id="ssh免登录的原理"><a href="#ssh免登录的原理" class="headerlink" title="ssh免登录的原理"></a>ssh免登录的原理</h3><img src="/2015/08/06/git的分支操作、远程仓库与hexo搭建/ssh免登陆.png" alt="[ssh免登陆]" title="[ssh免登陆]">
<h3 id="SSH免登录配置"><a href="#SSH免登录配置" class="headerlink" title="SSH免登录配置"></a>SSH免登录配置</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h2 id="使用github-pages搭建博客"><a href="#使用github-pages搭建博客" class="headerlink" title="使用github pages搭建博客"></a>使用github pages搭建博客</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages </a>本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>缺点：只能放静态页面，也就说github pages只能解析html、css、js，无法解析后端语言。</p>
<p>博客搭建步骤：</p>
<ol>
<li>在本地工作目录使用git初始化 <code>git init</code></li>
<li>创建自己的博客项目</li>
<li>将创建好的博客添加到暂存区 <code>git add [文件路径]</code></li>
<li>本地提交： <code>git commit -m &quot;第一个博客&quot;</code></li>
<li>在github上创建一个项目，项目名<code>用户名.github.io</code> 固定的</li>
<li>提交到github：<code>git push github仓库地址 master</code></li>
<li>查看github中对应的仓库中，是不是提交到了</li>
<li>访问：用户名.github.io</li>
</ol>
<h2 id="hexo创建博客（了解）"><a href="#hexo创建博客（了解）" class="headerlink" title="hexo创建博客（了解）"></a>hexo创建博客（了解）</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>安装hexo</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div><div class="line"></div><div class="line">hexo -v  # 查看hexo的版本信息</div></pre></td></tr></table></figure>
<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 新建一个目录  blog</div><div class="line">hexo init  # 初始化</div></pre></td></tr></table></figure>
<ul>
<li>生成静态页面</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate   # 生成静态页面	</div><div class="line">hexo g          # 生成静态页面（简写）</div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server   # 启动服务</div></pre></td></tr></table></figure>
<ul>
<li>访问站点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:4000/  # 通过这个地址就可以访问了</span></div></pre></td></tr></table></figure>
<h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><ul>
<li><code>hexo n &#39;博客标题&#39;</code>创建一篇新的博客</li>
<li><code>hexo g</code> 生成博客</li>
<li><code>hexo d</code> 发布博客</li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo中文文档</a></p>
]]></content>
      
        <categories>
            
            <category> Git/Github/blog </category>
            
            <category> 分支操作/远程仓库/hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2015/07/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Blog </category>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> �̳� </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
